[{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Freer\">Freer</a> f a <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:Pure\">Pure</a> :: a -&gt; <a href=\"Effect-Internal.html#t:Freer\" title=\"Effect.Internal\">Freer</a> f a</li><li><a href=\"#v:Impure\">Impure</a> :: f a -&gt; (a -&gt; <a href=\"Effect-Internal.html#t:Freer\" title=\"Effect.Internal\">Freer</a> f b) -&gt; <a href=\"Effect-Internal.html#t:Freer\" title=\"Effect.Internal\">Freer</a> f b</li></ul>","name":"Freer Impure Pure","module":"Effect.Internal","link":"Effect-Internal.html#t:Freer"},{"display_html":"<span class=\"keyword\">newtype</span> <a href=\"#t:Fixpoint\">Fixpoint</a> (f :: (<a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) (g :: (<a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:Fixpoint\">Fixpoint</a> :: {..} -&gt; <a href=\"Effect-Internal.html#t:Fixpoint\" title=\"Effect.Internal\">Fixpoint</a> f g a</li></ul>","name":"Fixpoint unFixpoint Fixpoint","module":"Effect.Internal","link":"Effect-Internal.html#t:Fixpoint"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"#t:InterpretOneLayer\">InterpretOneLayer</a> f g m <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:interpretOneLayer\">interpretOneLayer</a> :: (<span class=\"keyword\">forall</span> b. <a href=\"Effect-Internal.html#t:Fixpoint\" title=\"Effect.Internal\">Fixpoint</a> g f b -&gt; m b) -&gt; f (<a href=\"Effect-Internal.html#t:Fixpoint\" title=\"Effect.Internal\">Fixpoint</a> g f) a -&gt; m a</li></ul>","name":"InterpretOneLayer interpretOneLayer","module":"Effect.Internal","link":"Effect-Internal.html#t:InterpretOneLayer"},{"display_html":"<a href=\"#v:fromFixpoint\">fromFixpoint</a> :: (<a href=\"Effect-Internal.html#t:InterpretOneLayer\" title=\"Effect.Internal\">InterpretOneLayer</a> f g m, <a href=\"Effect-Internal.html#t:InterpretOneLayer\" title=\"Effect.Internal\">InterpretOneLayer</a> g f m) =&gt; <a href=\"Effect-Internal.html#t:Fixpoint\" title=\"Effect.Internal\">Fixpoint</a> f g a -&gt; m a","name":"fromFixpoint","module":"Effect.Internal","link":"Effect-Internal.html#v:fromFixpoint"},{"display_html":"<a href=\"#v:fromFixpoint-39-\">fromFixpoint'</a> :: (<a href=\"Effect-Internal.html#t:InterpretOneLayer\" title=\"Effect.Internal\">InterpretOneLayer</a> f g m, <a href=\"Effect-Internal.html#t:InterpretOneLayer\" title=\"Effect.Internal\">InterpretOneLayer</a> g f m) =&gt; f (<a href=\"Effect-Internal.html#t:Fixpoint\" title=\"Effect.Internal\">Fixpoint</a> g f) a -&gt; m a","name":"fromFixpoint'","module":"Effect.Internal","link":"Effect-Internal.html#v:fromFixpoint-39-"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"#t:InterpretOneLayerState\">InterpretOneLayerState</a> x f g m <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:interpretOneLayerState\">interpretOneLayerState</a> :: (<span class=\"keyword\">forall</span> b. x -&gt; <a href=\"Effect-Internal.html#t:Fixpoint\" title=\"Effect.Internal\">Fixpoint</a> g f b -&gt; m (b, x)) -&gt; x -&gt; f (<a href=\"Effect-Internal.html#t:Fixpoint\" title=\"Effect.Internal\">Fixpoint</a> g f) a -&gt; m (a, x)</li></ul>","name":"InterpretOneLayerState interpretOneLayerState","module":"Effect.Internal","link":"Effect-Internal.html#t:InterpretOneLayerState"},{"display_html":"<a href=\"#v:fromFixpointState\">fromFixpointState</a> :: (<a href=\"Effect-Internal.html#t:InterpretOneLayerState\" title=\"Effect.Internal\">InterpretOneLayerState</a> x f g m, <a href=\"Effect-Internal.html#t:InterpretOneLayerState\" title=\"Effect.Internal\">InterpretOneLayerState</a> x g f m) =&gt; x -&gt; <a href=\"Effect-Internal.html#t:Fixpoint\" title=\"Effect.Internal\">Fixpoint</a> f g a -&gt; m (a, x)","name":"fromFixpointState","module":"Effect.Internal","link":"Effect-Internal.html#v:fromFixpointState"},{"display_html":"<a href=\"#v:fromFixpointState-39-\">fromFixpointState'</a> :: (<a href=\"Effect-Internal.html#t:InterpretOneLayerState\" title=\"Effect.Internal\">InterpretOneLayerState</a> x f g m, <a href=\"Effect-Internal.html#t:InterpretOneLayerState\" title=\"Effect.Internal\">InterpretOneLayerState</a> x g f m) =&gt; x -&gt; g (<a href=\"Effect-Internal.html#t:Fixpoint\" title=\"Effect.Internal\">Fixpoint</a> f g) a -&gt; m (a, x)","name":"fromFixpointState'","module":"Effect.Internal","link":"Effect-Internal.html#v:fromFixpointState-39-"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:Effect\">Effect</a> = (<a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>","name":"Effect","module":"Effect","link":"Effect.html#t:Effect"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"#t:EffectInject\">EffectInject</a> (op :: <a href=\"Effect.html#t:Effect\" title=\"Effect\">Effect</a>) (ops :: [<a href=\"Effect.html#t:Effect\" title=\"Effect\">Effect</a>]) | ops -&gt; op","name":"EffectInject","module":"Effect","link":"Effect.html#t:EffectInject"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:AST\">AST</a> ops = <a href=\"Effect-Internal.html#t:Fixpoint\" title=\"Effect.Internal\">Fixpoint</a> <a href=\"Effect-Internal.html#t:Freer\" title=\"Effect.Internal\">Freer</a> (JoinedEffects ops)","name":"AST","module":"Effect","link":"Effect.html#t:AST"},{"display_html":"<a href=\"#v:astInject\">astInject</a> :: <a href=\"Effect.html#t:EffectInject\" title=\"Effect\">EffectInject</a> op ops =&gt; op (<a href=\"Effect.html#t:AST\" title=\"Effect\">AST</a> ops) a -&gt; <a href=\"Effect.html#t:AST\" title=\"Effect\">AST</a> ops a","name":"astInject","module":"Effect","link":"Effect.html#v:astInject"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"#t:InterpretEffect\">InterpretEffect</a> m op <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:interpretEffect\">interpretEffect</a> :: (<span class=\"keyword\">forall</span> b. <a href=\"Effect.html#t:AST\" title=\"Effect\">AST</a> ops b -&gt; m b) -&gt; op (<a href=\"Effect.html#t:AST\" title=\"Effect\">AST</a> ops) a -&gt; m a</li></ul>","name":"InterpretEffect interpretEffect","module":"Effect","link":"Effect.html#t:InterpretEffect"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"#t:InterpretEffects\">InterpretEffects</a> m ops","name":"InterpretEffects","module":"Effect","link":"Effect.html#t:InterpretEffects"},{"display_html":"<a href=\"#v:interpretAST\">interpretAST</a> :: (<a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad.html#t:Monad\" title=\"Control.Monad\">Monad</a> m, <a href=\"Effect.html#t:InterpretEffects\" title=\"Effect\">InterpretEffects</a> m ops) =&gt; <a href=\"Effect.html#t:AST\" title=\"Effect\">AST</a> ops a -&gt; m a","name":"interpretAST","module":"Effect","link":"Effect.html#v:interpretAST"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"#t:InterpretEffectStateful\">InterpretEffectStateful</a> t m op <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:interpretEffectStateful\">interpretEffectStateful</a> :: (<span class=\"keyword\">forall</span> b y. t y -&gt; <a href=\"Effect.html#t:AST\" title=\"Effect\">AST</a> ops b -&gt; m (b, t y)) -&gt; t x -&gt; op (<a href=\"Effect.html#t:AST\" title=\"Effect\">AST</a> ops) a -&gt; m (a, t x)</li></ul>","name":"InterpretEffectStateful interpretEffectStateful","module":"Effect","link":"Effect.html#t:InterpretEffectStateful"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"#t:InterpretEffectsStateful\">InterpretEffectsStateful</a> t m ops <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:interpretEffectsStateful\">interpretEffectsStateful</a> :: ConstraintList (<a href=\"Effect.html#t:InterpretEffectStateful\" title=\"Effect\">InterpretEffectStateful</a> t m) ops</li></ul>","name":"InterpretEffectsStateful interpretEffectsStateful","module":"Effect","link":"Effect.html#t:InterpretEffectsStateful"},{"display_html":"<a href=\"#v:interpretASTStateful\">interpretASTStateful</a> :: (<a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad.html#t:Monad\" title=\"Control.Monad\">Monad</a> m, <a href=\"Effect.html#t:InterpretEffectsStateful\" title=\"Effect\">InterpretEffectsStateful</a> t m ops) =&gt; t x -&gt; <a href=\"Effect.html#t:AST\" title=\"Effect\">AST</a> ops a -&gt; m (a, t x)","name":"interpretASTStateful","module":"Effect","link":"Effect.html#v:interpretASTStateful"},{"display_html":"<a href=\"#v:makeEffect\">makeEffect</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Language-Haskell-TH-Syntax.html#t:Name\" title=\"Language.Haskell.TH.Syntax\">Name</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Language-Haskell-TH-Syntax.html#t:Name\" title=\"Language.Haskell.TH.Syntax\">Name</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Language-Haskell-TH-Syntax.html#t:Q\" title=\"Language.Haskell.TH.Syntax\">Q</a> [<a href=\"https://hackage.haskell.org/package/-/docs/Language-Haskell-TH-Syntax.html#t:Dec\" title=\"Language.Haskell.TH.Syntax\">Dec</a>]","name":"makeEffect","module":"Effect.TH","link":"Effect-TH.html#v:makeEffect"},{"display_html":"<a href=\"#v:makeReification\">makeReification</a> :: ([<a href=\"https://hackage.haskell.org/package/-/docs/Language-Haskell-TH-Syntax.html#t:Name\" title=\"Language.Haskell.TH.Syntax\">Name</a>] -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Language-Haskell-TH-Syntax.html#t:Name\" title=\"Language.Haskell.TH.Syntax\">Name</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Language-Haskell-TH-Syntax.html#t:Q\" title=\"Language.Haskell.TH.Syntax\">Q</a> <a href=\"https://hackage.haskell.org/package/-/docs/Language-Haskell-TH-Syntax.html#t:Type\" title=\"Language.Haskell.TH.Syntax\">Type</a>) -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Language-Haskell-TH-Syntax.html#t:Name\" title=\"Language.Haskell.TH.Syntax\">Name</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Language-Haskell-TH-Syntax.html#t:Name\" title=\"Language.Haskell.TH.Syntax\">Name</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Language-Haskell-TH-Syntax.html#t:Q\" title=\"Language.Haskell.TH.Syntax\">Q</a> [<a href=\"https://hackage.haskell.org/package/-/docs/Language-Haskell-TH-Syntax.html#t:Dec\" title=\"Language.Haskell.TH.Syntax\">Dec</a>]","name":"makeReification","module":"Effect.TH","link":"Effect-TH.html#v:makeReification"},{"display_html":"<a href=\"#v:makeInterpretation\">makeInterpretation</a> :: ([<a href=\"https://hackage.haskell.org/package/-/docs/Language-Haskell-TH-Syntax.html#t:Name\" title=\"Language.Haskell.TH.Syntax\">Name</a>] -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Language-Haskell-TH-Syntax.html#t:Name\" title=\"Language.Haskell.TH.Syntax\">Name</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Language-Haskell-TH-Syntax.html#t:Q\" title=\"Language.Haskell.TH.Syntax\">Q</a> <a href=\"https://hackage.haskell.org/package/-/docs/Language-Haskell-TH-Syntax.html#t:Type\" title=\"Language.Haskell.TH.Syntax\">Type</a>) -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Language-Haskell-TH-Syntax.html#t:Name\" title=\"Language.Haskell.TH.Syntax\">Name</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Language-Haskell-TH-Syntax.html#t:Name\" title=\"Language.Haskell.TH.Syntax\">Name</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Language-Haskell-TH-Syntax.html#t:Q\" title=\"Language.Haskell.TH.Syntax\">Q</a> [<a href=\"https://hackage.haskell.org/package/-/docs/Language-Haskell-TH-Syntax.html#t:Dec\" title=\"Language.Haskell.TH.Syntax\">Dec</a>]","name":"makeInterpretation","module":"Effect.TH","link":"Effect-TH.html#v:makeInterpretation"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:StateEffect\">StateEffect</a> s (m :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) a <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:Put\">Put</a> :: s -&gt; <a href=\"Effect-State.html#t:StateEffect\" title=\"Effect.State\">StateEffect</a> s m ()</li><li><a href=\"#v:Get\">Get</a> :: <a href=\"Effect-State.html#t:StateEffect\" title=\"Effect.State\">StateEffect</a> s m s</li></ul>","name":"StateEffect Put Get","module":"Effect.State","link":"Effect-State.html#t:StateEffect"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:IOEffect\">IOEffect</a> (m :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) a <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:LiftIO\">LiftIO</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/System-IO.html#t:IO\" title=\"System.IO\">IO</a> a -&gt; <a href=\"Effect-IO.html#t:IOEffect\" title=\"Effect.IO\">IOEffect</a> m a</li></ul>","name":"IOEffect LiftIO","module":"Effect.IO","link":"Effect-IO.html#t:IOEffect"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:ErrorEffect\">ErrorEffect</a> e m a <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:ThrowError\">ThrowError</a> :: e -&gt; <a href=\"Effect-Error.html#t:ErrorEffect\" title=\"Effect.Error\">ErrorEffect</a> e m a</li><li><a href=\"#v:CatchError\">CatchError</a> :: m a -&gt; (e -&gt; m a) -&gt; <a href=\"Effect-Error.html#t:ErrorEffect\" title=\"Effect.Error\">ErrorEffect</a> e m a</li></ul>","name":"ErrorEffect CatchError ThrowError","module":"Effect.Error","link":"Effect-Error.html#t:ErrorEffect"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Foo\">Foo</a> (m :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) a <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:Foo\">Foo</a> :: ((m a -&gt; b) -&gt; m c) -&gt; <a href=\"Effect-THTests.html#t:Foo\" title=\"Effect.THTests\">Foo</a> m c</li></ul>","name":"Foo Foo","module":"Effect.THTests","link":"Effect-THTests.html#t:Foo"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad.html#t:Monad\" title=\"Control.Monad\">Monad</a> m =&gt; <a href=\"#t:MonadFoo\">MonadFoo</a> m <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:foo\">foo</a> :: ((m a -&gt; b) -&gt; m c) -&gt; m c</li></ul>","name":"MonadFoo foo","module":"Effect.THTests","link":"Effect-THTests.html#t:MonadFoo"},{"display_html":"<a href=\"#v:interpretFoo\">interpretFoo</a> :: <a href=\"Effect-THTests.html#t:MonadFoo\" title=\"Effect.THTests\">MonadFoo</a> m =&gt; (<span class=\"keyword\">forall</span> b. <a href=\"Effect.html#t:AST\" title=\"Effect\">AST</a> ops b -&gt; m b) -&gt; <a href=\"Effect-THTests.html#t:Foo\" title=\"Effect.THTests\">Foo</a> (<a href=\"Effect.html#t:AST\" title=\"Effect\">AST</a> ops) a -&gt; m a","name":"interpretFoo","module":"Effect.THTests","link":"Effect-THTests.html#v:interpretFoo"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Bar\">Bar</a> m a <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:Bar\">Bar</a> :: (((a -&gt; m b) -&gt; c) -&gt; d) -&gt; <a href=\"Effect-THTests.html#t:Bar\" title=\"Effect.THTests\">Bar</a> m c</li></ul>","name":"Bar Bar","module":"Effect.THTests","link":"Effect-THTests.html#t:Bar"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad.html#t:Monad\" title=\"Control.Monad\">Monad</a> m =&gt; <a href=\"#t:MonadBar\">MonadBar</a> m <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:bar\">bar</a> :: (((a -&gt; m b) -&gt; c) -&gt; d) -&gt; m c</li></ul>","name":"MonadBar bar","module":"Effect.THTests","link":"Effect-THTests.html#t:MonadBar"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Baz\">Baz</a> m a <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:Baz\">Baz</a> :: ((m a -&gt; b) -&gt; m c) -&gt; <a href=\"Effect-THTests.html#t:Baz\" title=\"Effect.THTests\">Baz</a> m c</li></ul>","name":"Baz Baz","module":"Effect.THTests","link":"Effect-THTests.html#t:Baz"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad.html#t:Monad\" title=\"Control.Monad\">Monad</a> m =&gt; <a href=\"#t:MonadBaz\">MonadBaz</a> m <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:baz\">baz</a> :: ((m a -&gt; b) -&gt; m c) -&gt; m c</li></ul>","name":"MonadBaz baz","module":"Effect.THTests","link":"Effect-THTests.html#t:MonadBaz"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Quux\">Quux</a> m a <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:Quux\">Quux</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> (<a href=\"https://hackage.haskell.org/package/-/docs/System-IO.html#t:IO\" title=\"System.IO\">IO</a> x, (m a, <a href=\"https://hackage.haskell.org/package/-/docs/Data-Bool.html#t:Bool\" title=\"Data.Bool\">Bool</a>)) [b -&gt; m a] -&gt; <a href=\"Effect-THTests.html#t:Quux\" title=\"Effect.THTests\">Quux</a> m a</li></ul>","name":"Quux Quux","module":"Effect.THTests","link":"Effect-THTests.html#t:Quux"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad.html#t:Monad\" title=\"Control.Monad\">Monad</a> m =&gt; <a href=\"#t:MonadQuux\">MonadQuux</a> m <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:quux\">quux</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> (<a href=\"https://hackage.haskell.org/package/-/docs/System-IO.html#t:IO\" title=\"System.IO\">IO</a> x, (m a, <a href=\"https://hackage.haskell.org/package/-/docs/Data-Bool.html#t:Bool\" title=\"Data.Bool\">Bool</a>)) [b -&gt; m a] -&gt; m a</li></ul>","name":"MonadQuux quux","module":"Effect.THTests","link":"Effect-THTests.html#t:MonadQuux"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:WriterEffect\">WriterEffect</a> w :: <a href=\"Effect.html#t:Effect\" title=\"Effect\">Effect</a> <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:Tell\">Tell</a> :: w -&gt; <a href=\"Effect-Writer.html#t:WriterEffect\" title=\"Effect.Writer\">WriterEffect</a> w m ()</li><li><a href=\"#v:Listen\">Listen</a> :: m a -&gt; <a href=\"Effect-Writer.html#t:WriterEffect\" title=\"Effect.Writer\">WriterEffect</a> w m (a, w)</li><li><a href=\"#v:Pass\">Pass</a> :: m (a, w -&gt; w) -&gt; <a href=\"Effect-Writer.html#t:WriterEffect\" title=\"Effect.Writer\">WriterEffect</a> w m a</li></ul>","name":"WriterEffect Tell Listen Pass","module":"Effect.Writer","link":"Effect-Writer.html#t:WriterEffect"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Ltl\">Ltl</a> a<ul class=\"subs\"><li>= <a href=\"#v:LtlTruth\">LtlTruth</a></li><li>| <a href=\"#v:LtlFalsity\">LtlFalsity</a></li><li>| <a href=\"#v:LtlAtom\">LtlAtom</a> a</li><li>| <a href=\"#v:LtlOr\">LtlOr</a> (<a href=\"Logic-Ltl.html#t:Ltl\" title=\"Logic.Ltl\">Ltl</a> a) (<a href=\"Logic-Ltl.html#t:Ltl\" title=\"Logic.Ltl\">Ltl</a> a)</li><li>| <a href=\"#v:LtlAnd\">LtlAnd</a> (<a href=\"Logic-Ltl.html#t:Ltl\" title=\"Logic.Ltl\">Ltl</a> a) (<a href=\"Logic-Ltl.html#t:Ltl\" title=\"Logic.Ltl\">Ltl</a> a)</li><li>| <a href=\"#v:LtlNext\">LtlNext</a> (<a href=\"Logic-Ltl.html#t:Ltl\" title=\"Logic.Ltl\">Ltl</a> a)</li><li>| <a href=\"#v:LtlUntil\">LtlUntil</a> (<a href=\"Logic-Ltl.html#t:Ltl\" title=\"Logic.Ltl\">Ltl</a> a) (<a href=\"Logic-Ltl.html#t:Ltl\" title=\"Logic.Ltl\">Ltl</a> a)</li><li>| <a href=\"#v:LtlRelease\">LtlRelease</a> (<a href=\"Logic-Ltl.html#t:Ltl\" title=\"Logic.Ltl\">Ltl</a> a) (<a href=\"Logic-Ltl.html#t:Ltl\" title=\"Logic.Ltl\">Ltl</a> a)</li></ul>","name":"Ltl LtlTruth LtlFalsity LtlAtom LtlOr LtlAnd LtlNext LtlUntil LtlRelease","module":"Logic.Ltl","link":"Logic-Ltl.html#t:Ltl"},{"display_html":"<a href=\"#v:somewhere\">somewhere</a> :: a -&gt; <a href=\"Logic-Ltl.html#t:Ltl\" title=\"Logic.Ltl\">Ltl</a> a","name":"somewhere","module":"Logic.Ltl","link":"Logic-Ltl.html#v:somewhere"},{"display_html":"<a href=\"#v:everywhere\">everywhere</a> :: a -&gt; <a href=\"Logic-Ltl.html#t:Ltl\" title=\"Logic.Ltl\">Ltl</a> a","name":"everywhere","module":"Logic.Ltl","link":"Logic-Ltl.html#v:everywhere"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:LtlAST\">LtlAST</a> mod ops = <a href=\"Effect.html#t:AST\" title=\"Effect\">AST</a> (LtlEffect mod ': ops)","name":"LtlAST","module":"Logic.Ltl","link":"Logic-Ltl.html#t:LtlAST"},{"display_html":"<a href=\"#v:modifyLtl\">modifyLtl</a> :: <a href=\"Logic-Ltl.html#t:Ltl\" title=\"Logic.Ltl\">Ltl</a> mod -&gt; <a href=\"Logic-Ltl.html#t:LtlAST\" title=\"Logic.Ltl\">LtlAST</a> mod ops a -&gt; <a href=\"Logic-Ltl.html#t:LtlAST\" title=\"Logic.Ltl\">LtlAST</a> mod ops a","name":"modifyLtl","module":"Logic.Ltl","link":"Logic-Ltl.html#v:modifyLtl"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"#t:InterpretLtl\">InterpretLtl</a> (mod :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) (m :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) (op :: <a href=\"Effect.html#t:Effect\" title=\"Effect\">Effect</a>) <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:interpretLtl\">interpretLtl</a> :: op dummy a -&gt; <a href=\"Logic-Ltl.html#t:LtlInterp\" title=\"Logic.Ltl\">LtlInterp</a> mod m a</li></ul>","name":"InterpretLtl interpretLtl","module":"Logic.Ltl","link":"Logic-Ltl.html#t:InterpretLtl"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:LtlInterp\">LtlInterp</a> mod m a<ul class=\"subs\"><li>= <a href=\"#v:Ignore\">Ignore</a></li><li>| <a href=\"#v:Apply\">Apply</a> (mod -&gt; m (<a href=\"https://hackage.haskell.org/package/-/docs/Data-Maybe.html#t:Maybe\" title=\"Data.Maybe\">Maybe</a> a))</li></ul>","name":"LtlInterp Ignore Apply","module":"Logic.Ltl","link":"Logic-Ltl.html#t:LtlInterp"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"#t:InterpretLtlHigherOrder\">InterpretLtlHigherOrder</a> (mod :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) (m :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) (op :: <a href=\"Effect.html#t:Effect\" title=\"Effect\">Effect</a>) <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:interpretLtlHigherOrder\">interpretLtlHigherOrder</a> :: op (<a href=\"Effect.html#t:AST\" title=\"Effect\">AST</a> ops) a -&gt; <a href=\"Logic-Ltl.html#t:LtlInterpHigherOrder\" title=\"Logic.Ltl\">LtlInterpHigherOrder</a> mod m ops a</li></ul>","name":"InterpretLtlHigherOrder interpretLtlHigherOrder","module":"Logic.Ltl","link":"Logic-Ltl.html#t:InterpretLtlHigherOrder"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:LtlInterpHigherOrder\">LtlInterpHigherOrder</a> (mod :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) (m :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) (ops :: [<a href=\"Effect.html#t:Effect\" title=\"Effect\">Effect</a>]) (a :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:Direct\">Direct</a> :: <a href=\"Logic-Ltl.html#t:LtlInterp\" title=\"Logic.Ltl\">LtlInterp</a> mod m a -&gt; <a href=\"Logic-Ltl.html#t:LtlInterpHigherOrder\" title=\"Logic.Ltl\">LtlInterpHigherOrder</a> mod m ops a</li><li><a href=\"#v:Nested\">Nested</a> :: ((<span class=\"keyword\">forall</span> b. [<a href=\"Logic-Ltl.html#t:Ltl\" title=\"Logic.Ltl\">Ltl</a> mod] -&gt; <a href=\"Effect.html#t:AST\" title=\"Effect\">AST</a> ops b -&gt; m (b, [<a href=\"Logic-Ltl.html#t:Ltl\" title=\"Logic.Ltl\">Ltl</a> mod])) -&gt; [<a href=\"Logic-Ltl.html#t:Ltl\" title=\"Logic.Ltl\">Ltl</a> mod] -&gt; m (a, [<a href=\"Logic-Ltl.html#t:Ltl\" title=\"Logic.Ltl\">Ltl</a> mod])) -&gt; <a href=\"Logic-Ltl.html#t:LtlInterpHigherOrder\" title=\"Logic.Ltl\">LtlInterpHigherOrder</a> mod m ops a</li></ul>","name":"LtlInterpHigherOrder Direct Nested","module":"Logic.Ltl","link":"Logic-Ltl.html#t:LtlInterpHigherOrder"},{"display_html":"<a href=\"#v:interpretLtlAST\">interpretLtlAST</a> :: <span class=\"keyword\">forall</span> mod m ops a. (<a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Semigroup\" title=\"Prelude\">Semigroup</a> mod, <a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad.html#t:MonadPlus\" title=\"Control.Monad\">MonadPlus</a> m, <a href=\"Logic-Ltl.html#t:InterpretEffectsLtl\" title=\"Logic.Ltl\">InterpretEffectsLtl</a> mod m ops) =&gt; <a href=\"Logic-Ltl.html#t:LtlAST\" title=\"Logic.Ltl\">LtlAST</a> mod ops a -&gt; m a","name":"interpretLtlAST","module":"Logic.Ltl","link":"Logic-Ltl.html#v:interpretLtlAST"},{"display_html":"<a href=\"#v:interpretLtlASTWithInitialFormulas\">interpretLtlASTWithInitialFormulas</a> :: (<a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Semigroup\" title=\"Prelude\">Semigroup</a> mod, <a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad.html#t:MonadPlus\" title=\"Control.Monad\">MonadPlus</a> m, <a href=\"Logic-Ltl.html#t:InterpretEffectsLtl\" title=\"Logic.Ltl\">InterpretEffectsLtl</a> mod m ops) =&gt; [<a href=\"Logic-Ltl.html#t:Ltl\" title=\"Logic.Ltl\">Ltl</a> mod] -&gt; <a href=\"Logic-Ltl.html#t:LtlAST\" title=\"Logic.Ltl\">LtlAST</a> mod ops a -&gt; m a","name":"interpretLtlASTWithInitialFormulas","module":"Logic.Ltl","link":"Logic-Ltl.html#v:interpretLtlASTWithInitialFormulas"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:InterpretEffectsLtl\">InterpretEffectsLtl</a> mod m ops = <a href=\"Effect.html#t:InterpretEffectsStateful\" title=\"Effect\">InterpretEffectsStateful</a> (<a href=\"https://hackage.haskell.org/package/-/docs/Data-Functor-Const.html#t:Const\" title=\"Data.Functor.Const\">Const</a> [<a href=\"Logic-Ltl.html#t:Ltl\" title=\"Logic.Ltl\">Ltl</a> mod]) m ops","name":"InterpretEffectsLtl","module":"Logic.Ltl","link":"Logic-Ltl.html#t:InterpretEffectsLtl"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad.html#t:Monad\" title=\"Control.Monad\">Monad</a> m =&gt; <a href=\"#t:MonadKeyValue\">MonadKeyValue</a> k v m <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:storeValue\">storeValue</a> :: k -&gt; v -&gt; m ()</li><li><a href=\"#v:getValue\">getValue</a> :: k -&gt; m (<a href=\"https://hackage.haskell.org/package/-/docs/Data-Maybe.html#t:Maybe\" title=\"Data.Maybe\">Maybe</a> v)</li><li><a href=\"#v:deleteValue\">deleteValue</a> :: k -&gt; m ()</li></ul>","name":"MonadKeyValue deleteValue getValue storeValue","module":"Examples.Ltl.Simple","link":"Examples-Ltl-Simple.html#t:MonadKeyValue"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:KeyValueT\">KeyValueT</a> k v = <a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad-State-Lazy.html#t:StateT\" title=\"Control.Monad.State.Lazy\">StateT</a> (<a href=\"https://hackage.haskell.org/package/-/docs/Data-Map-Strict.html#t:Map\" title=\"Data.Map.Strict\">Map</a> k v)","name":"KeyValueT","module":"Examples.Ltl.Simple","link":"Examples-Ltl-Simple.html#t:KeyValueT"},{"display_html":"<a href=\"#v:runKeyValueT\">runKeyValueT</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Map-Strict.html#t:Map\" title=\"Data.Map.Strict\">Map</a> k v -&gt; <a href=\"Examples-Ltl-Simple.html#t:KeyValueT\" title=\"Examples.Ltl.Simple\">KeyValueT</a> k v m a -&gt; m (a, <a href=\"https://hackage.haskell.org/package/-/docs/Data-Map-Strict.html#t:Map\" title=\"Data.Map.Strict\">Map</a> k v)","name":"runKeyValueT","module":"Examples.Ltl.Simple","link":"Examples-Ltl-Simple.html#v:runKeyValueT"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:KeyValueEffect\">KeyValueEffect</a> k v :: <a href=\"Effect.html#t:Effect\" title=\"Effect\">Effect</a> <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:StoreValue\">StoreValue</a> :: k -&gt; v -&gt; <a href=\"Examples-Ltl-Simple.html#t:KeyValueEffect\" title=\"Examples.Ltl.Simple\">KeyValueEffect</a> k v m ()</li><li><a href=\"#v:GetValue\">GetValue</a> :: k -&gt; <a href=\"Examples-Ltl-Simple.html#t:KeyValueEffect\" title=\"Examples.Ltl.Simple\">KeyValueEffect</a> k v m (<a href=\"https://hackage.haskell.org/package/-/docs/Data-Maybe.html#t:Maybe\" title=\"Data.Maybe\">Maybe</a> v)</li><li><a href=\"#v:DeleteValue\">DeleteValue</a> :: k -&gt; <a href=\"Examples-Ltl-Simple.html#t:KeyValueEffect\" title=\"Examples.Ltl.Simple\">KeyValueEffect</a> k v m ()</li></ul>","name":"KeyValueEffect DeleteValue GetValue StoreValue","module":"Examples.Ltl.Simple","link":"Examples-Ltl-Simple.html#t:KeyValueEffect"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:SingleStepMod\">SingleStepMod</a> = <a href=\"#v:ConcatIfReplace\">ConcatIfReplace</a>","name":"SingleStepMod ConcatIfReplace","module":"Examples.Ltl.Simple","link":"Examples-Ltl-Simple.html#t:SingleStepMod"},{"display_html":"<a href=\"#v:interpretAndRun\">interpretAndRun</a> :: (<a href=\"https://hackage.haskell.org/package/-/docs/Data-Monoid.html#t:Monoid\" title=\"Data.Monoid\">Monoid</a> v, <a href=\"https://hackage.haskell.org/package/-/docs/Data-Ord.html#t:Ord\" title=\"Data.Ord\">Ord</a> k) =&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Map-Strict.html#t:Map\" title=\"Data.Map.Strict\">Map</a> k v -&gt; <a href=\"Logic-Ltl.html#t:LtlAST\" title=\"Logic.Ltl\">LtlAST</a> <a href=\"Examples-Ltl-Simple.html#t:SingleStepMod\" title=\"Examples.Ltl.Simple\">SingleStepMod</a> '[<a href=\"Examples-Ltl-Simple.html#t:KeyValueEffect\" title=\"Examples.Ltl.Simple\">KeyValueEffect</a> k v] a -&gt; [(a, <a href=\"https://hackage.haskell.org/package/-/docs/Data-Map-Strict.html#t:Map\" title=\"Data.Map.Strict\">Map</a> k v)]","name":"interpretAndRun","module":"Examples.Ltl.Simple","link":"Examples-Ltl-Simple.html#v:interpretAndRun"},{"display_html":"<a href=\"#v:exampleSomewhere1\">exampleSomewhere1</a> :: [((), <a href=\"https://hackage.haskell.org/package/-/docs/Data-Map-Strict.html#t:Map\" title=\"Data.Map.Strict\">Map</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-Int.html#t:Int\" title=\"Data.Int\">Int</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a>)]","name":"exampleSomewhere1","module":"Examples.Ltl.Simple","link":"Examples-Ltl-Simple.html#v:exampleSomewhere1"},{"display_html":"<a href=\"#v:exampleSomewhere2\">exampleSomewhere2</a> :: [((), <a href=\"https://hackage.haskell.org/package/-/docs/Data-Map-Strict.html#t:Map\" title=\"Data.Map.Strict\">Map</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-Int.html#t:Int\" title=\"Data.Int\">Int</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a>)]","name":"exampleSomewhere2","module":"Examples.Ltl.Simple","link":"Examples-Ltl-Simple.html#v:exampleSomewhere2"},{"display_html":"<a href=\"#v:exampleEverywhere1\">exampleEverywhere1</a> :: [((), <a href=\"https://hackage.haskell.org/package/-/docs/Data-Map-Strict.html#t:Map\" title=\"Data.Map.Strict\">Map</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-Int.html#t:Int\" title=\"Data.Int\">Int</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a>)]","name":"exampleEverywhere1","module":"Examples.Ltl.Simple","link":"Examples-Ltl-Simple.html#v:exampleEverywhere1"},{"display_html":"<a href=\"#v:exampleEverywhere2\">exampleEverywhere2</a> :: [((), <a href=\"https://hackage.haskell.org/package/-/docs/Data-Map-Strict.html#t:Map\" title=\"Data.Map.Strict\">Map</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-Int.html#t:Int\" title=\"Data.Int\">Int</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a>)]","name":"exampleEverywhere2","module":"Examples.Ltl.Simple","link":"Examples-Ltl-Simple.html#v:exampleEverywhere2"},{"display_html":"<a href=\"#v:exampleEverywhere3\">exampleEverywhere3</a> :: [((), <a href=\"https://hackage.haskell.org/package/-/docs/Data-Map-Strict.html#t:Map\" title=\"Data.Map.Strict\">Map</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-Int.html#t:Int\" title=\"Data.Int\">Int</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a>)]","name":"exampleEverywhere3","module":"Examples.Ltl.Simple","link":"Examples-Ltl-Simple.html#v:exampleEverywhere3"},{"display_html":"<a href=\"#v:exampleCustom1\">exampleCustom1</a> :: [((), <a href=\"https://hackage.haskell.org/package/-/docs/Data-Map-Strict.html#t:Map\" title=\"Data.Map.Strict\">Map</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-Int.html#t:Int\" title=\"Data.Int\">Int</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a>)]","name":"exampleCustom1","module":"Examples.Ltl.Simple","link":"Examples-Ltl-Simple.html#v:exampleCustom1"},{"display_html":"<a href=\"#v:exampleBug\">exampleBug</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Test-Tasty-Providers.html#t:TestTree\" title=\"Test.Tasty.Providers\">TestTree</a>","name":"exampleBug","module":"Examples.Ltl.Simple","link":"Examples-Ltl-Simple.html#v:exampleBug"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"#t:Truthy\">Truthy</a> v <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:truthy\">truthy</a> :: v -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Bool.html#t:Bool\" title=\"Data.Bool\">Bool</a></li></ul>","name":"Truthy truthy","module":"Examples.Ltl.HigherOrder","link":"Examples-Ltl-HigherOrder.html#t:Truthy"},{"display_html":"<span class=\"keyword\">class</span> (<a href=\"Examples-Ltl-HigherOrder.html#t:Truthy\" title=\"Examples.Ltl.HigherOrder\">Truthy</a> v, <a href=\"Examples-Ltl-Simple.html#t:MonadKeyValue\" title=\"Examples.Ltl.Simple\">MonadKeyValue</a> k v m, <a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad-Error-Class.html#t:MonadError\" title=\"Control.Monad.Error.Class\">MonadError</a> e m) =&gt; <a href=\"#t:MonadMiniLang\">MonadMiniLang</a> e k v m <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:ifThenElse\">ifThenElse</a> :: k -&gt; m a -&gt; m a -&gt; m a</li><li><a href=\"#v:while\">while</a> :: k -&gt; m () -&gt; m ()</li></ul>","name":"MonadMiniLang while ifThenElse","module":"Examples.Ltl.HigherOrder","link":"Examples-Ltl-HigherOrder.html#t:MonadMiniLang"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:MiniLangT\">MiniLangT</a> e k v m = <a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad-Except.html#t:ExceptT\" title=\"Control.Monad.Except\">ExceptT</a> e (<a href=\"Examples-Ltl-Simple.html#t:KeyValueT\" title=\"Examples.Ltl.Simple\">KeyValueT</a> k v m)","name":"MiniLangT","module":"Examples.Ltl.HigherOrder","link":"Examples-Ltl-HigherOrder.html#t:MiniLangT"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:MiniLang\">MiniLang</a> e k v = <a href=\"Examples-Ltl-HigherOrder.html#t:MiniLangT\" title=\"Examples.Ltl.HigherOrder\">MiniLangT</a> e k v <a href=\"https://hackage.haskell.org/package/-/docs/Data-Functor-Identity.html#t:Identity\" title=\"Data.Functor.Identity\">Identity</a>","name":"MiniLang","module":"Examples.Ltl.HigherOrder","link":"Examples-Ltl-HigherOrder.html#t:MiniLang"},{"display_html":"<a href=\"#v:runMiniLangT\">runMiniLangT</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Map-Strict.html#t:Map\" title=\"Data.Map.Strict\">Map</a> k v -&gt; <a href=\"Examples-Ltl-HigherOrder.html#t:MiniLangT\" title=\"Examples.Ltl.HigherOrder\">MiniLangT</a> e k v m a -&gt; m (<a href=\"https://hackage.haskell.org/package/-/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> e a, <a href=\"https://hackage.haskell.org/package/-/docs/Data-Map-Strict.html#t:Map\" title=\"Data.Map.Strict\">Map</a> k v)","name":"runMiniLangT","module":"Examples.Ltl.HigherOrder","link":"Examples-Ltl-HigherOrder.html#v:runMiniLangT"},{"display_html":"<a href=\"#v:runMiniLang\">runMiniLang</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Map-Strict.html#t:Map\" title=\"Data.Map.Strict\">Map</a> k v -&gt; <a href=\"Examples-Ltl-HigherOrder.html#t:MiniLang\" title=\"Examples.Ltl.HigherOrder\">MiniLang</a> e k v a -&gt; (<a href=\"https://hackage.haskell.org/package/-/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> e a, <a href=\"https://hackage.haskell.org/package/-/docs/Data-Map-Strict.html#t:Map\" title=\"Data.Map.Strict\">Map</a> k v)","name":"runMiniLang","module":"Examples.Ltl.HigherOrder","link":"Examples-Ltl-HigherOrder.html#v:runMiniLang"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:MiniLangEffect\">MiniLangEffect</a> e k v :: <a href=\"Effect.html#t:Effect\" title=\"Effect\">Effect</a> <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:IfThenElse\">IfThenElse</a> :: k -&gt; m a -&gt; m a -&gt; <a href=\"Examples-Ltl-HigherOrder.html#t:MiniLangEffect\" title=\"Examples.Ltl.HigherOrder\">MiniLangEffect</a> e k v m a</li><li><a href=\"#v:While\">While</a> :: k -&gt; m () -&gt; <a href=\"Examples-Ltl-HigherOrder.html#t:MiniLangEffect\" title=\"Examples.Ltl.HigherOrder\">MiniLangEffect</a> e k v m ()</li></ul>","name":"MiniLangEffect While IfThenElse","module":"Examples.Ltl.HigherOrder","link":"Examples-Ltl-HigherOrder.html#t:MiniLangEffect"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:MiniLangValue\">MiniLangValue</a><ul class=\"subs\"><li>= <a href=\"#v:MLBool\">MLBool</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-Bool.html#t:Bool\" title=\"Data.Bool\">Bool</a></li><li>| <a href=\"#v:MLInteger\">MLInteger</a> <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a></li></ul>","name":"MiniLangValue MLInteger MLBool","module":"Examples.Ltl.HigherOrder","link":"Examples-Ltl-HigherOrder.html#t:MiniLangValue"},{"display_html":"<a href=\"#v:getInteger\">getInteger</a> :: <a href=\"Examples-Ltl-HigherOrder.html#t:MonadMiniLang\" title=\"Examples.Ltl.HigherOrder\">MonadMiniLang</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> <a href=\"Examples-Ltl-HigherOrder.html#t:MiniLangValue\" title=\"Examples.Ltl.HigherOrder\">MiniLangValue</a> m =&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> -&gt; m <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a>","name":"getInteger","module":"Examples.Ltl.HigherOrder","link":"Examples-Ltl-HigherOrder.html#v:getInteger"},{"display_html":"<a href=\"#v:fibonacciTest\">fibonacciTest</a> :: <a href=\"Examples-Ltl-HigherOrder.html#t:MonadMiniLang\" title=\"Examples.Ltl.HigherOrder\">MonadMiniLang</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> <a href=\"Examples-Ltl-HigherOrder.html#t:MiniLangValue\" title=\"Examples.Ltl.HigherOrder\">MiniLangValue</a> m =&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a> -&gt; m <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a>","name":"fibonacciTest","module":"Examples.Ltl.HigherOrder","link":"Examples-Ltl-HigherOrder.html#v:fibonacciTest"},{"display_html":"<a href=\"#v:branchTest\">branchTest</a> :: <a href=\"Examples-Ltl-HigherOrder.html#t:MonadMiniLang\" title=\"Examples.Ltl.HigherOrder\">MonadMiniLang</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> <a href=\"Examples-Ltl-HigherOrder.html#t:MiniLangValue\" title=\"Examples.Ltl.HigherOrder\">MiniLangValue</a> m =&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a> -&gt; m <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a>","name":"branchTest","module":"Examples.Ltl.HigherOrder","link":"Examples-Ltl-HigherOrder.html#v:branchTest"},{"display_html":"<a href=\"#v:simpleRun\">simpleRun</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Ord.html#t:Ord\" title=\"Data.Ord\">Ord</a> k =&gt; <a href=\"Examples-Ltl-HigherOrder.html#t:MiniLangT\" title=\"Examples.Ltl.HigherOrder\">MiniLangT</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> k v <a href=\"https://hackage.haskell.org/package/-/docs/Data-Functor-Identity.html#t:Identity\" title=\"Data.Functor.Identity\">Identity</a> a -&gt; (<a href=\"https://hackage.haskell.org/package/-/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> a, <a href=\"https://hackage.haskell.org/package/-/docs/Data-Map-Strict.html#t:Map\" title=\"Data.Map.Strict\">Map</a> k v)","name":"simpleRun","module":"Examples.Ltl.HigherOrder","link":"Examples-Ltl-HigherOrder.html#v:simpleRun"},{"display_html":"<a href=\"#v:foo\">foo</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a> -&gt; (<a href=\"https://hackage.haskell.org/package/-/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a>, <a href=\"https://hackage.haskell.org/package/-/docs/Data-Map-Strict.html#t:Map\" title=\"Data.Map.Strict\">Map</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> <a href=\"Examples-Ltl-HigherOrder.html#t:MiniLangValue\" title=\"Examples.Ltl.HigherOrder\">MiniLangValue</a>)","name":"foo","module":"Examples.Ltl.HigherOrder","link":"Examples-Ltl-HigherOrder.html#v:foo"},{"display_html":"<a href=\"#v:bar\">bar</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a> -&gt; (<a href=\"https://hackage.haskell.org/package/-/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a>, <a href=\"https://hackage.haskell.org/package/-/docs/Data-Map-Strict.html#t:Map\" title=\"Data.Map.Strict\">Map</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> <a href=\"Examples-Ltl-HigherOrder.html#t:MiniLangValue\" title=\"Examples.Ltl.HigherOrder\">MiniLangValue</a>)","name":"bar","module":"Examples.Ltl.HigherOrder","link":"Examples-Ltl-HigherOrder.html#v:bar"},{"display_html":"<span class=\"keyword\">newtype</span> <a href=\"#t:DomainT\">DomainT</a> s w m a = <a href=\"#v:DomainT\">DomainT</a> {<ul class=\"subs\"><li><a href=\"#v:unDomain\">unDomain</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad-State-Lazy.html#t:StateT\" title=\"Control.Monad.State.Lazy\">StateT</a> s (<a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad-Writer-Lazy.html#t:WriterT\" title=\"Control.Monad.Writer.Lazy\">WriterT</a> w m) a</li></ul>}","name":"DomainT unDomain DomainT","module":"Examples","link":"Examples.html#t:DomainT"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:Domain\">Domain</a> s w a = <a href=\"Examples.html#t:DomainT\" title=\"Examples\">DomainT</a> s w <a href=\"https://hackage.haskell.org/package/-/docs/Data-Functor-Identity.html#t:Identity\" title=\"Data.Functor.Identity\">Identity</a> a","name":"Domain","module":"Examples","link":"Examples.html#t:Domain"},{"display_html":"<a href=\"#v:runDomainT\">runDomainT</a> :: (<a href=\"https://hackage.haskell.org/package/-/docs/Data-Monoid.html#t:Monoid\" title=\"Data.Monoid\">Monoid</a> w, <a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad.html#t:Monad\" title=\"Control.Monad\">Monad</a> m) =&gt; s -&gt; <a href=\"Examples.html#t:DomainT\" title=\"Examples\">DomainT</a> s w m a -&gt; m (a, w)","name":"runDomainT","module":"Examples","link":"Examples.html#v:runDomainT"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:ExampleEffects\">ExampleEffects</a> s w = '[<a href=\"Effect-Writer.html#t:WriterEffect\" title=\"Effect.Writer\">WriterEffect</a> w, <a href=\"Effect-State.html#t:StateEffect\" title=\"Effect.State\">StateEffect</a> s]","name":"ExampleEffects","module":"Examples","link":"Examples.html#t:ExampleEffects"},{"display_html":"<a href=\"#v:interpretAndRun\">interpretAndRun</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Monoid.html#t:Monoid\" title=\"Data.Monoid\">Monoid</a> w =&gt; s -&gt; <a href=\"Effect.html#t:AST\" title=\"Effect\">AST</a> (<a href=\"Examples.html#t:ExampleEffects\" title=\"Examples\">ExampleEffects</a> s w) a -&gt; (a, w)","name":"interpretAndRun","module":"Examples","link":"Examples.html#v:interpretAndRun"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Modification\">Modification</a><ul class=\"subs\"><li>= <a href=\"#v:ModA\">ModA</a></li><li>| <a href=\"#v:ModB\">ModB</a></li><li>| <a href=\"#v:ModAB\">ModAB</a></li></ul>","name":"Modification ModAB ModB ModA","module":"Examples","link":"Examples.html#t:Modification"},{"display_html":"<a href=\"#v:trace1\">trace1</a> :: (<a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad-Writer-Class.html#t:MonadWriter\" title=\"Control.Monad.Writer.Class\">MonadWriter</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> m, <a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad-State-Class.html#t:MonadState\" title=\"Control.Monad.State.Class\">MonadState</a> <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a> m) =&gt; m ()","name":"trace1","module":"Examples","link":"Examples.html#v:trace1"},{"display_html":"<a href=\"#v:trace2\">trace2</a> :: (<a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad-Writer-Class.html#t:MonadWriter\" title=\"Control.Monad.Writer.Class\">MonadWriter</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> m, <a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad-State-Class.html#t:MonadState\" title=\"Control.Monad.State.Class\">MonadState</a> <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a> m) =&gt; m ((), <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a>)","name":"trace2","module":"Examples","link":"Examples.html#v:trace2"},{"display_html":"<a href=\"#v:trace3\">trace3</a> :: (<a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad-Writer-Class.html#t:MonadWriter\" title=\"Control.Monad.Writer.Class\">MonadWriter</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> m, <a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad-State-Class.html#t:MonadState\" title=\"Control.Monad.State.Class\">MonadState</a> <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a> m) =&gt; m ((), <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a>)","name":"trace3","module":"Examples","link":"Examples.html#v:trace3"},{"display_html":"<a href=\"#v:trace4\">trace4</a> :: (<a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad-Writer-Class.html#t:MonadWriter\" title=\"Control.Monad.Writer.Class\">MonadWriter</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> m, <a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad-State-Class.html#t:MonadState\" title=\"Control.Monad.State.Class\">MonadState</a> <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a> m) =&gt; m ((), <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a>)","name":"trace4","module":"Examples","link":"Examples.html#v:trace4"},{"display_html":"<a href=\"#v:interpretAndRunLtl\">interpretAndRunLtl</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a> -&gt; <a href=\"Logic-Ltl.html#t:LtlAST\" title=\"Logic.Ltl\">LtlAST</a> <a href=\"Examples.html#t:Modification\" title=\"Examples\">Modification</a> (<a href=\"Examples.html#t:ExampleEffects\" title=\"Examples\">ExampleEffects</a> <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a>) a -&gt; [(a, <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a>)]","name":"interpretAndRunLtl","module":"Examples","link":"Examples.html#v:interpretAndRunLtl"},{"display_html":"<a href=\"#v:example1a\">example1a</a> :: [((), <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a>)]","name":"example1a","module":"Examples","link":"Examples.html#v:example1a"},{"display_html":"<a href=\"#v:example1b\">example1b</a> :: [((), <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a>)]","name":"example1b","module":"Examples","link":"Examples.html#v:example1b"},{"display_html":"<a href=\"#v:example2a\">example2a</a> :: [(((), <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a>), <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a>)]","name":"example2a","module":"Examples","link":"Examples.html#v:example2a"},{"display_html":"<a href=\"#v:example3a\">example3a</a> :: [(((), <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a>), <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a>)]","name":"example3a","module":"Examples","link":"Examples.html#v:example3a"},{"display_html":"<a href=\"#v:example4a\">example4a</a> :: [(((), <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a>), <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a>)]","name":"example4a","module":"Examples","link":"Examples.html#v:example4a"},{"display_html":"<a href=\"#v:example2b\">example2b</a> :: [(((), <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a>), <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a>)]","name":"example2b","module":"Examples","link":"Examples.html#v:example2b"},{"display_html":"<a href=\"#v:example3b\">example3b</a> :: [(((), <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a>), <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a>)]","name":"example3b","module":"Examples","link":"Examples.html#v:example3b"},{"display_html":"<a href=\"#v:example4b\">example4b</a> :: [(((), <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a>), <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a>)]","name":"example4b","module":"Examples","link":"Examples.html#v:example4b"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:NextBind\">NextBind</a> t x <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:DoNothing\">DoNothing</a> :: x -&gt; <a href=\"Logic-NextBind.html#t:NextBind\" title=\"Logic.NextBind\">NextBind</a> t x</li><li><a href=\"#v:Fail\">Fail</a> :: <a href=\"Logic-NextBind.html#t:NextBind\" title=\"Logic.NextBind\">NextBind</a> t ()</li><li><a href=\"#v:Now\">Now</a> :: t x -&gt; <a href=\"Logic-NextBind.html#t:NextBind\" title=\"Logic.NextBind\">NextBind</a> t x</li><li><a href=\"#v:Branch\">Branch</a> :: <a href=\"Logic-NextBind.html#t:NextBind\" title=\"Logic.NextBind\">NextBind</a> t x -&gt; <a href=\"Logic-NextBind.html#t:NextBind\" title=\"Logic.NextBind\">NextBind</a> t x -&gt; <a href=\"Logic-NextBind.html#t:NextBind\" title=\"Logic.NextBind\">NextBind</a> t x</li><li><a href=\"#v:Next\">Next</a> :: <a href=\"Logic-NextBind.html#t:NextBind\" title=\"Logic.NextBind\">NextBind</a> t y -&gt; (y -&gt; <a href=\"Logic-NextBind.html#t:NextBind\" title=\"Logic.NextBind\">NextBind</a> t x) -&gt; <a href=\"Logic-NextBind.html#t:NextBind\" title=\"Logic.NextBind\">NextBind</a> t x</li></ul>","name":"NextBind Now DoNothing Branch Next Fail","module":"Logic.NextBind","link":"Logic-NextBind.html#t:NextBind"},{"display_html":"<a href=\"#v:andLater\">andLater</a> :: t a -&gt; (a -&gt; t b) -&gt; <a href=\"Logic-NextBind.html#t:NextBind\" title=\"Logic.NextBind\">NextBind</a> t b","name":"andLater","module":"Logic.NextBind","link":"Logic-NextBind.html#v:andLater"},{"display_html":"<a href=\"#v:somewhere\">somewhere</a> :: t a -&gt; <a href=\"Logic-NextBind.html#t:NextBind\" title=\"Logic.NextBind\">NextBind</a> t a","name":"somewhere","module":"Logic.NextBind","link":"Logic-NextBind.html#v:somewhere"},{"display_html":"<a href=\"#v:everywhere\">everywhere</a> :: t a -&gt; <a href=\"Logic-NextBind.html#t:NextBind\" title=\"Logic.NextBind\">NextBind</a> t a","name":"everywhere","module":"Logic.NextBind","link":"Logic-NextBind.html#v:everywhere"},{"display_html":"<a href=\"#v:finished\">finished</a> :: <a href=\"Logic-NextBind.html#t:NextBind\" title=\"Logic.NextBind\">NextBind</a> t x -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Bool.html#t:Bool\" title=\"Data.Bool\">Bool</a>","name":"finished","module":"Logic.NextBind","link":"Logic-NextBind.html#v:finished"},{"display_html":"<a href=\"#v:immediate\">immediate</a> :: <a href=\"Logic-NextBind.html#t:NextBind\" title=\"Logic.NextBind\">NextBind</a> t x -&gt; [x]","name":"immediate","module":"Logic.NextBind","link":"Logic-NextBind.html#v:immediate"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Interpretation\">Interpretation</a> t m ops a <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:Direct\">Direct</a> :: (<span class=\"keyword\">forall</span> x. t x -&gt; m (<a href=\"https://hackage.haskell.org/package/-/docs/Data-Maybe.html#t:Maybe\" title=\"Data.Maybe\">Maybe</a> (a, x))) -&gt; <a href=\"Logic-NextBind.html#t:Interpretation\" title=\"Logic.NextBind\">Interpretation</a> t m ops a</li><li><a href=\"#v:Nested\">Nested</a> :: <a href=\"Effect.html#t:AST\" title=\"Effect\">AST</a> ops b -&gt; (<span class=\"keyword\">forall</span> x. <a href=\"Logic-NextBind.html#t:NextBind\" title=\"Logic.NextBind\">NextBind</a> t x -&gt; <a href=\"Logic-NextBind.html#t:NextBind\" title=\"Logic.NextBind\">NextBind</a> t x) -&gt; (<span class=\"keyword\">forall</span> x. m (b, <a href=\"Logic-NextBind.html#t:NextBind\" title=\"Logic.NextBind\">NextBind</a> t x) -&gt; m (a, <a href=\"Logic-NextBind.html#t:NextBind\" title=\"Logic.NextBind\">NextBind</a> t x)) -&gt; <a href=\"Logic-NextBind.html#t:Interpretation\" title=\"Logic.NextBind\">Interpretation</a> t m ops a</li></ul>","name":"Interpretation Nested Direct","module":"Logic.NextBind","link":"Logic-NextBind.html#t:Interpretation"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"#t:InterpretNextBind\">InterpretNextBind</a> t m op <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:interpretNextBind\">interpretNextBind</a> :: op (<a href=\"Effect.html#t:AST\" title=\"Effect\">AST</a> ops) a -&gt; <a href=\"Logic-NextBind.html#t:Interpretation\" title=\"Logic.NextBind\">Interpretation</a> t m ops a</li></ul>","name":"InterpretNextBind interpretNextBind","module":"Logic.NextBind","link":"Logic-NextBind.html#t:InterpretNextBind"},{"display_html":"<span class=\"keyword\">newtype</span> <a href=\"#t:Customer\">Customer</a> = <a href=\"#v:Customer\">Customer</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a>","name":"Customer Customer","module":"ShopExample","link":"ShopExample.html#t:Customer"},{"display_html":"<span class=\"keyword\">newtype</span> <a href=\"#t:Coins\">Coins</a> = <a href=\"#v:Coins\">Coins</a> {<ul class=\"subs\"><li><a href=\"#v:getCoins\">getCoins</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Int.html#t:Int\" title=\"Data.Int\">Int</a></li></ul>}","name":"Coins getCoins Coins","module":"ShopExample","link":"ShopExample.html#t:Coins"},{"display_html":"<span class=\"keyword\">newtype</span> <a href=\"#t:Coupons\">Coupons</a> = <a href=\"#v:Coupons\">Coupons</a> {<ul class=\"subs\"><li><a href=\"#v:getCoupons\">getCoupons</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Int.html#t:Int\" title=\"Data.Int\">Int</a></li></ul>}","name":"Coupons getCoupons Coupons","module":"ShopExample","link":"ShopExample.html#t:Coupons"},{"display_html":"<span class=\"keyword\">newtype</span> <a href=\"#t:Bananas\">Bananas</a> = <a href=\"#v:Bananas\">Bananas</a> {<ul class=\"subs\"><li><a href=\"#v:getBananas\">getBananas</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Int.html#t:Int\" title=\"Data.Int\">Int</a></li></ul>}","name":"Bananas getBananas Bananas","module":"ShopExample","link":"ShopExample.html#t:Bananas"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:ShopError\">ShopError</a><ul class=\"subs\"><li>= <a href=\"#v:OutOfBananas\">OutOfBananas</a></li><li>| <a href=\"#v:NotEnoughPaid\">NotEnoughPaid</a></li><li>| <a href=\"#v:NotEnoughCoupons\">NotEnoughCoupons</a></li></ul>","name":"ShopError NotEnoughCoupons NotEnoughPaid OutOfBananas","module":"ShopExample","link":"ShopExample.html#t:ShopError"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad-Error-Class.html#t:MonadError\" title=\"Control.Monad.Error.Class\">MonadError</a> <a href=\"ShopExample.html#t:ShopError\" title=\"ShopExample\">ShopError</a> m =&gt; <a href=\"#t:MonadShop\">MonadShop</a> m <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:buy\">buy</a> :: <a href=\"ShopExample.html#t:Customer\" title=\"ShopExample\">Customer</a> -&gt; <a href=\"ShopExample.html#t:Coupons\" title=\"ShopExample\">Coupons</a> -&gt; <a href=\"ShopExample.html#t:Coins\" title=\"ShopExample\">Coins</a> -&gt; <a href=\"ShopExample.html#t:Bananas\" title=\"ShopExample\">Bananas</a> -&gt; m ()</li></ul>","name":"MonadShop buy","module":"ShopExample","link":"ShopExample.html#t:MonadShop"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:ShopState\">ShopState</a> = <a href=\"#v:ShopState\">ShopState</a> <a href=\"ShopExample.html#t:Coins\" title=\"ShopExample\">Coins</a> <a href=\"ShopExample.html#t:Bananas\" title=\"ShopExample\">Bananas</a> (<a href=\"https://hackage.haskell.org/package/-/docs/Data-Map-Strict.html#t:Map\" title=\"Data.Map.Strict\">Map</a> <a href=\"ShopExample.html#t:Customer\" title=\"ShopExample\">Customer</a> <a href=\"ShopExample.html#t:Coupons\" title=\"ShopExample\">Coupons</a>)","name":"ShopState ShopState","module":"ShopExample","link":"ShopExample.html#t:ShopState"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:ShopT\">ShopT</a> m = <a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad-Except.html#t:ExceptT\" title=\"Control.Monad.Except\">ExceptT</a> <a href=\"ShopExample.html#t:ShopError\" title=\"ShopExample\">ShopError</a> (<a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad-State-Lazy.html#t:StateT\" title=\"Control.Monad.State.Lazy\">StateT</a> <a href=\"ShopExample.html#t:ShopState\" title=\"ShopExample\">ShopState</a> m)","name":"ShopT","module":"ShopExample","link":"ShopExample.html#t:ShopT"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:Shop\">Shop</a> = <a href=\"ShopExample.html#t:ShopT\" title=\"ShopExample\">ShopT</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-Functor-Identity.html#t:Identity\" title=\"Data.Functor.Identity\">Identity</a>","name":"Shop","module":"ShopExample","link":"ShopExample.html#t:Shop"},{"display_html":"<a href=\"#v:runShopT\">runShopT</a> :: <a href=\"ShopExample.html#t:ShopState\" title=\"ShopExample\">ShopState</a> -&gt; <a href=\"ShopExample.html#t:ShopT\" title=\"ShopExample\">ShopT</a> m a -&gt; m (<a href=\"https://hackage.haskell.org/package/-/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> <a href=\"ShopExample.html#t:ShopError\" title=\"ShopExample\">ShopError</a> a, <a href=\"ShopExample.html#t:ShopState\" title=\"ShopExample\">ShopState</a>)","name":"runShopT","module":"ShopExample","link":"ShopExample.html#v:runShopT"},{"display_html":"<a href=\"#v:runShop\">runShop</a> :: <a href=\"ShopExample.html#t:ShopState\" title=\"ShopExample\">ShopState</a> -&gt; <a href=\"ShopExample.html#t:Shop\" title=\"ShopExample\">Shop</a> a -&gt; (<a href=\"https://hackage.haskell.org/package/-/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> <a href=\"ShopExample.html#t:ShopError\" title=\"ShopExample\">ShopError</a> a, <a href=\"ShopExample.html#t:ShopState\" title=\"ShopExample\">ShopState</a>)","name":"runShop","module":"ShopExample","link":"ShopExample.html#v:runShop"},{"display_html":"<a href=\"#v:initialShopState\">initialShopState</a> :: <a href=\"ShopExample.html#t:ShopState\" title=\"ShopExample\">ShopState</a>","name":"initialShopState","module":"ShopExample","link":"ShopExample.html#v:initialShopState"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:ShopEffect\">ShopEffect</a> (m :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) (a :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:Buy\">Buy</a> :: <a href=\"ShopExample.html#t:Customer\" title=\"ShopExample\">Customer</a> -&gt; <a href=\"ShopExample.html#t:Coupons\" title=\"ShopExample\">Coupons</a> -&gt; <a href=\"ShopExample.html#t:Coins\" title=\"ShopExample\">Coins</a> -&gt; <a href=\"ShopExample.html#t:Bananas\" title=\"ShopExample\">Bananas</a> -&gt; <a href=\"ShopExample.html#t:ShopEffect\" title=\"ShopExample\">ShopEffect</a> m ()</li></ul>","name":"ShopEffect Buy","module":"ShopExample","link":"ShopExample.html#t:ShopEffect"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Tweak\">Tweak</a> a <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:AskForCoupons\">AskForCoupons</a> :: <a href=\"ShopExample.html#t:Tweak\" title=\"ShopExample\">Tweak</a> <a href=\"ShopExample.html#t:Coupons\" title=\"ShopExample\">Coupons</a></li><li><a href=\"#v:UseCoupons\">UseCoupons</a> :: <a href=\"ShopExample.html#t:Coupons\" title=\"ShopExample\">Coupons</a> -&gt; <a href=\"ShopExample.html#t:Tweak\" title=\"ShopExample\">Tweak</a> ()</li></ul>","name":"Tweak UseCoupons AskForCoupons","module":"ShopExample","link":"ShopExample.html#t:Tweak"},{"display_html":"<a href=\"#v:interpretAndRun\">interpretAndRun</a> :: <a href=\"Logic-NextBind.html#t:NextBind\" title=\"Logic.NextBind\">NextBind</a> <a href=\"ShopExample.html#t:Tweak\" title=\"ShopExample\">Tweak</a> x -&gt; <a href=\"ShopExample.html#t:ShopState\" title=\"ShopExample\">ShopState</a> -&gt; <a href=\"Effect.html#t:AST\" title=\"Effect\">AST</a> '[<a href=\"ShopExample.html#t:ShopEffect\" title=\"ShopExample\">ShopEffect</a>, <a href=\"Effect-Error.html#t:ErrorEffect\" title=\"Effect.Error\">ErrorEffect</a> <a href=\"ShopExample.html#t:ShopError\" title=\"ShopExample\">ShopError</a>] a -&gt; [(<a href=\"https://hackage.haskell.org/package/-/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> <a href=\"ShopExample.html#t:ShopError\" title=\"ShopExample\">ShopError</a> (a, <a href=\"Logic-NextBind.html#t:NextBind\" title=\"Logic.NextBind\">NextBind</a> <a href=\"ShopExample.html#t:Tweak\" title=\"ShopExample\">Tweak</a> x), <a href=\"ShopExample.html#t:ShopState\" title=\"ShopExample\">ShopState</a>)]","name":"interpretAndRun","module":"ShopExample","link":"ShopExample.html#v:interpretAndRun"},{"display_html":"<a href=\"#v:interpretRunPrune\">interpretRunPrune</a> :: <a href=\"Logic-NextBind.html#t:NextBind\" title=\"Logic.NextBind\">NextBind</a> <a href=\"ShopExample.html#t:Tweak\" title=\"ShopExample\">Tweak</a> x -&gt; <a href=\"ShopExample.html#t:ShopState\" title=\"ShopExample\">ShopState</a> -&gt; <a href=\"Effect.html#t:AST\" title=\"Effect\">AST</a> '[<a href=\"ShopExample.html#t:ShopEffect\" title=\"ShopExample\">ShopEffect</a>, <a href=\"Effect-Error.html#t:ErrorEffect\" title=\"Effect.Error\">ErrorEffect</a> <a href=\"ShopExample.html#t:ShopError\" title=\"ShopExample\">ShopError</a>] a -&gt; [(<a href=\"https://hackage.haskell.org/package/-/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> <a href=\"ShopExample.html#t:ShopError\" title=\"ShopExample\">ShopError</a> a, <a href=\"ShopExample.html#t:ShopState\" title=\"ShopExample\">ShopState</a>)]","name":"interpretRunPrune","module":"ShopExample","link":"ShopExample.html#v:interpretRunPrune"},{"display_html":"<a href=\"#v:trace1\">trace1</a> :: <a href=\"ShopExample.html#t:MonadShop\" title=\"ShopExample\">MonadShop</a> m =&gt; m ()","name":"trace1","module":"ShopExample","link":"ShopExample.html#v:trace1"},{"display_html":"<a href=\"#v:trace2\">trace2</a> :: <a href=\"ShopExample.html#t:MonadShop\" title=\"ShopExample\">MonadShop</a> m =&gt; m ()","name":"trace2","module":"ShopExample","link":"ShopExample.html#v:trace2"}]